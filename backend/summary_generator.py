import pandas as pd
from datetime import datetime
from typing import List, Dict, Any

class EnergySummaryGenerator:
    def __init__(self):
        self.template = """
# Energy Data Analysis Report

## Executive Summary
{executive_summary}

## Data Overview
- **Total Records Processed**: {total_records:,}
- **Anomalies Detected**: {anomalies_found}
- **Anomaly Rate**: {anomaly_rate:.2f}%
- **Processing Time**: {processing_time:.2f} seconds

## Key Findings
{key_findings}

## Anomaly Details
{anomaly_details}

## Recommendations
{recommendations}

## Technical Details
- **Analysis Date**: {analysis_date}
- **Data Source**: {data_source}
- **Model Used**: Isolation Forest
- **Contamination Rate**: 5%

---
*Report generated by Rayfield Systems Energy Analytics Platform*
"""

    def generate_summary(self, analysis_results: Dict[str, Any]) -> str:
        """Generate a comprehensive summary from analysis results"""
        
        # Extract data from results
        anomalies_found = analysis_results.get('anomalies_found', 0)
        total_records = analysis_results.get('total_records', 0)
        processing_time = analysis_results.get('processing_time', 0)
        anomalies_data = analysis_results.get('anomalies_data', [])
        
        # Calculate derived metrics
        anomaly_rate = (anomalies_found / total_records * 100) if total_records > 0 else 0
        
        # Generate executive summary
        executive_summary = self._generate_executive_summary(
            anomalies_found, total_records, anomaly_rate
        )
        
        # Generate key findings
        key_findings = self._generate_key_findings(anomalies_data, anomaly_rate)
        
        # Generate anomaly details
        anomaly_details = self._generate_anomaly_details(anomalies_data)
        
        # Generate recommendations
        recommendations = self._generate_recommendations(anomalies_found, anomaly_rate)
        
        # Format the report
        report = self.template.format(
            executive_summary=executive_summary,
            total_records=total_records,
            anomalies_found=anomalies_found,
            anomaly_rate=anomaly_rate,
            processing_time=processing_time,
            key_findings=key_findings,
            anomaly_details=anomaly_details,
            recommendations=recommendations,
            analysis_date=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            data_source="Energy Emissions Data"
        )
        
        return report

    def _generate_executive_summary(self, anomalies_found: int, total_records: int, anomaly_rate: float) -> str:
        """Generate executive summary based on analysis results"""
        
        if anomalies_found == 0:
            return f"""
The energy data analysis has been completed successfully. No anomalies were detected in the dataset of {total_records:,} records, indicating normal operational patterns across all monitored facilities.
            """.strip()
        
        severity_breakdown = "high, medium, and low priority" if anomalies_found > 2 else "various priority levels"
        
        return f"""
The energy data analysis has identified {anomalies_found} anomalies across {total_records:,} records, representing an anomaly rate of {anomaly_rate:.2f}%. These anomalies span {severity_breakdown} and require immediate attention to ensure optimal energy efficiency and compliance with environmental standards.
            """.strip()

    def _generate_key_findings(self, anomalies_data: List[Dict], anomaly_rate: float) -> str:
        """Generate key findings from anomaly data"""
        
        if not anomalies_data:
            return "- No anomalies detected in the analyzed dataset"
        
        findings = []
        
        # Analyze severity distribution
        high_severity = [a for a in anomalies_data if a.get('severity') == 'High']
        medium_severity = [a for a in anomalies_data if a.get('severity') == 'Medium']
        
        if high_severity:
            findings.append(f"- {len(high_severity)} high-severity anomalies detected requiring immediate attention")
        
        if medium_severity:
            findings.append(f"- {len(medium_severity)} medium-severity anomalies identified for review")
        
        # Analyze facilities
        facilities = list(set(a.get('facility', 'Unknown') for a in anomalies_data))
        if len(facilities) <= 3:
            findings.append(f"- Anomalies concentrated in {len(facilities)} facilities: {', '.join(facilities)}")
        else:
            findings.append(f"- Anomalies spread across {len(facilities)} different facilities")
        
        # Analyze emission values
        if anomalies_data:
            max_emission = max(a.get('emission_value', 0) for a in anomalies_data)
            findings.append(f"- Highest anomalous emission value: {max_emission:.2f} units")
        
        # Overall assessment
        if anomaly_rate < 1:
            findings.append("- Overall system performance is within normal parameters")
        elif anomaly_rate < 5:
            findings.append("- Moderate anomaly rate suggests some operational issues")
        else:
            findings.append("- High anomaly rate indicates significant operational concerns")
        
        return "\n".join(findings)

    def _generate_anomaly_details(self, anomalies_data: List[Dict]) -> str:
        """Generate detailed anomaly information"""
        
        if not anomalies_data:
            return "No anomalies to report."
        
        details = []
        for i, anomaly in enumerate(anomalies_data[:10], 1):  # Limit to first 10
            facility = anomaly.get('facility', 'Unknown')
            year = anomaly.get('year', 'Unknown')
            emission_value = anomaly.get('emission_value', 0)
            severity = anomaly.get('severity', 'Unknown')
            
            details.append(f"""
**Anomaly {i}**: {facility} ({year})
- **Emission Value**: {emission_value:.2f} units
- **Severity**: {severity}
- **Status**: Active
            """.strip())
        
        if len(anomalies_data) > 10:
            details.append(f"\n*... and {len(anomalies_data) - 10} additional anomalies*")
        
        return "\n\n".join(details)

    def _generate_recommendations(self, anomalies_found: int, anomaly_rate: float) -> str:
        """Generate recommendations based on analysis results"""
        
        recommendations = []
        
        if anomalies_found == 0:
            recommendations.extend([
                "- Continue current monitoring practices",
                "- Maintain existing operational procedures",
                "- Schedule regular follow-up analyses"
            ])
        else:
            recommendations.extend([
                "- Investigate high-severity anomalies immediately",
                "- Review operational procedures at affected facilities",
                "- Implement additional monitoring for identified patterns",
                "- Schedule follow-up analysis within 30 days"
            ])
            
            if anomaly_rate > 5:
                recommendations.extend([
                    "- Consider system-wide operational review",
                    "- Implement enhanced monitoring protocols",
                    "- Schedule emergency response team review"
                ])
        
        recommendations.extend([
            "- Document all findings for compliance reporting",
            "- Share results with relevant stakeholders",
            "- Update monitoring thresholds if necessary"
        ])
        
        return "\n".join(f"- {rec}" for rec in recommendations)

    def generate_csv_summary(self, anomalies_data: List[Dict]) -> str:
        """Generate CSV format summary for export"""
        
        if not anomalies_data:
            return "Facility,Year,Emission_Value,Severity,Timestamp\n"
        
        csv_lines = ["Facility,Year,Emission_Value,Severity,Timestamp"]
        
        for anomaly in anomalies_data:
            facility = anomaly.get('facility', 'Unknown')
            year = anomaly.get('year', 'Unknown')
            emission_value = anomaly.get('emission_value', 0)
            severity = anomaly.get('severity', 'Unknown')
            timestamp = anomaly.get('timestamp', '')
            
            csv_lines.append(f"{facility},{year},{emission_value:.2f},{severity},{timestamp}")
        
        return "\n".join(csv_lines)

# Example usage
if __name__ == "__main__":
    generator = EnergySummaryGenerator()
    
    # Mock data for testing
    mock_results = {
        'anomalies_found': 5,
        'total_records': 1000,
        'processing_time': 2.5,
        'anomalies_data': [
            {
                'facility': 'Power Plant Alpha',
                'year': '2024',
                'emission_value': 2450.67,
                'severity': 'High',
                'timestamp': '2025-01-08T21:30:00Z'
            },
            {
                'facility': 'Energy Station Beta',
                'year': '2024',
                'emission_value': 1890.23,
                'severity': 'Medium',
                'timestamp': '2025-01-08T21:30:00Z'
            }
        ]
    }
    
    summary = generator.generate_summary(mock_results)
    print(summary) 